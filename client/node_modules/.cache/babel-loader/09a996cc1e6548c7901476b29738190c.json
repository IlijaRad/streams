{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = formProps => {\n      //return <input onChange={formProps.input.onChange} value={formProps.input.value} />\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: formProps.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...formProps.input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'red'\n          },\n          children: this.renderError(formProps.meta)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  renderError(formProps) {\n    if (formProps.touched && formProps.error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formProps.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  onSubmit(formValues) {\n    console.log('kek');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  //Errors.property looks for Field name and it's the same it passes the error\n  //onto the this.renderInput which is formProps.meta.error\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["D:/React/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","formProps","label","input","color","renderError","meta","touched","error","onSubmit","formValues","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA0C;AAAA;AAAA;;AAAA,SAQtCC,WARsC,GAQvBC,SAAD,IAAe;AACzB;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACI;AAAA,oBAAQA,SAAS,CAACC;AAAlB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,sBAAWD,SAAS,CAACE,KAArB;AAA4B,UAAA,YAAY,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAK,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAZ;AAAA,oBAA6B,KAAKC,WAAL,CAAiBJ,SAAS,CAACK,IAA3B;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KAjBqC;AAAA;;AACtCD,EAAAA,WAAW,CAACJ,SAAD,EAAW;AAClB,QAAIA,SAAS,CAACM,OAAV,IAAqBN,SAAS,CAACO,KAAnC,EAAyC;AACrC,0BACI;AAAA,kBAAMP,SAAS,CAACO;AAAhB;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;AACJ;;AAYDC,EAAAA,QAAQ,CAACC,UAAD,EAAY;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKT,WAApC;AAAiD,QAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AA/BqC;;AAkC1C,MAAMgB,QAAQ,GAAIN,UAAD,IAAgB;AAC7B;AACA;AACA,QAAMO,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAED,MAAI,CAACR,UAAU,CAACS,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAdD;;AAgBA,eAAepB,SAAS,CAAC;AACrBuB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZlB,YAHY,CAAf","sourcesContent":["import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\n\r\nclass StreamCreate extends React.Component{\r\n    renderError(formProps){\r\n        if (formProps.touched && formProps.error){\r\n            return (\r\n                <div>{formProps.error}</div>\r\n            )\r\n        }\r\n    }\r\n    renderInput = (formProps) => {\r\n        //return <input onChange={formProps.input.onChange} value={formProps.input.value} />\r\n        return (\r\n            <div className=\"field\">\r\n                <label>{formProps.label}</label>\r\n                <input {...formProps.input} autoComplete=\"off\"/>\r\n                <div style={{color: 'red'}}>{this.renderError(formProps.meta)}</div>\r\n            </div>    \r\n        )\r\n    }\r\n\r\n    onSubmit(formValues){\r\n        console.log('kek')\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n                <Field name=\"title\" component={this.renderInput} label=\"Enter title\"/>\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter description\"/>\r\n                <button>Submit</button>\r\n            </form>\r\n        )\r\n    }   \r\n}\r\n\r\nconst validate = (formValues) => {\r\n    //Errors.property looks for Field name and it's the same it passes the error\r\n    //onto the this.renderInput which is formProps.meta.error\r\n    const errors = {};\r\n\r\n    if (!formValues.title){\r\n        errors.title = 'You must enter a title'\r\n    }\r\n\r\n    if (!formValues.description) {\r\n        errors.description = 'You must enter a description'\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'streamCreate',\r\n    validate: validate\r\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}